/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "n",
        type: "string",
      },
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "d",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c6938038062000c698339810160408190526200003491620002c3565b82826003620000448382620003d9565b506004620000538282620003d9565b50506005805460ff191660ff8416179055506200007d336b033b2e3c9fd0803ce800000062000086565b505050620004cd565b6001600160a01b038216620000b65760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000c460008383620000c8565b5050565b6001600160a01b038316620000f7578060026000828254620000eb9190620004a5565b909155506200016b9050565b6001600160a01b038316600090815260208190526040902054818110156200014c5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000ad565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200018957600280548290039055620001a8565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001ee91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022357600080fd5b81516001600160401b0380821115620002405762000240620001fb565b604051601f8301601f19908116603f011681019082821181831017156200026b576200026b620001fb565b81604052838152602092508660208588010111156200028957600080fd5b600091505b83821015620002ad57858201830151818301840152908201906200028e565b6000602085830101528094505050505092915050565b600080600060608486031215620002d957600080fd5b83516001600160401b0380821115620002f157600080fd5b620002ff8783880162000211565b945060208601519150808211156200031657600080fd5b50620003258682870162000211565b925050604084015160ff811681146200033d57600080fd5b809150509250925092565b600181811c908216806200035d57607f821691505b6020821081036200037e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003d4576000816000526020600020601f850160051c81016020861015620003af5750805b601f850160051c820191505b81811015620003d057828155600101620003bb565b5050505b505050565b81516001600160401b03811115620003f557620003f5620001fb565b6200040d8162000406845462000348565b8462000384565b602080601f8311600181146200044557600084156200042c5750858301515b600019600386901b1c1916600185901b178555620003d0565b600085815260208120601f198616915b82811015620004765788860151825594840194600190910190840162000455565b5085821015620004955787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620004c757634e487b7160e01b600052601160045260246000fd5b92915050565b61078c80620004dd6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461011e57806370a082311461013357806395d89b411461015c578063a9059cbb14610164578063dd62ed3e1461017757600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab6101b0565b6040516100b891906105d5565b60405180910390f35b6100d46100cf366004610640565b610242565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d461010436600461066a565b61025c565b60055460405160ff90911681526020016100b8565b61013161012c366004610640565b610280565b005b6100e86101413660046106a6565b6001600160a01b031660009081526020819052604090205490565b6100ab61028e565b6100d4610172366004610640565b61029d565b6100e86101853660046106c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101bf906106fb565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb906106fb565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905090565b6000336102508185856102ab565b60019150505b92915050565b60003361026a8582856102bd565b610275858585610341565b506001949350505050565b61028a82826103a0565b5050565b6060600480546101bf906106fb565b600033610250818585610341565b6102b883838360016103d6565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561033b578181101561032c57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61033b848484840360006103d6565b50505050565b6001600160a01b03831661036b57604051634b637e8f60e11b815260006004820152602401610323565b6001600160a01b0382166103955760405163ec442f0560e01b815260006004820152602401610323565b6102b88383836104ab565b6001600160a01b0382166103ca5760405163ec442f0560e01b815260006004820152602401610323565b61028a600083836104ab565b6001600160a01b0384166104005760405163e602df0560e01b815260006004820152602401610323565b6001600160a01b03831661042a57604051634a1406b160e11b815260006004820152602401610323565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561033b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161049d91815260200190565b60405180910390a350505050565b6001600160a01b0383166104d65780600260008282546104cb9190610735565b909155506105489050565b6001600160a01b038316600090815260208190526040902054818110156105295760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610323565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661056457600280548290039055610583565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105c891815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610603578581018301518582016040015282016105e7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461063b57600080fd5b919050565b6000806040838503121561065357600080fd5b61065c83610624565b946020939093013593505050565b60008060006060848603121561067f57600080fd5b61068884610624565b925061069660208501610624565b9150604084013590509250925092565b6000602082840312156106b857600080fd5b6106c182610624565b9392505050565b600080604083850312156106db57600080fd5b6106e483610624565b91506106f260208401610624565b90509250929050565b600181811c9082168061070f57607f821691505b60208210810361072f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561025657634e487b7160e01b600052601160045260246000fdfea2646970667358221220826c240719c0de535db6636e07b31a61b8f3c00ee539fe67d6c7efb3d8718a7564736f6c63430008180033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    n: string,
    s: string,
    d: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(n, s, d, overrides || {});
  }
  override deploy(
    n: string,
    s: string,
    d: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(n, s, d, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
