/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "n",
        type: "string",
      },
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "d",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a2338038062001a238339818101604052810190620000379190620005a2565b828281600390816200004a919062000887565b5080600490816200005c919062000887565b5050506200007b67b86cf72a0d68210160c01b6200011160201b60201c565b62000097670e232c121ba68c5a60c01b6200011160201b60201c565b80600560006101000a81548160ff021916908360ff160217905550620000ce678a79a5ec0b28e93260c01b6200011160201b60201c565b620000ea679d023ce5e13b5acc60c01b6200011160201b60201c565b62000108336b033b2e3c9fd0803ce80000006200011460201b60201c565b50505062000aa5565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001895760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620001809190620009b3565b60405180910390fd5b6200019d60008383620001a160201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620001f7578060026000828254620001ea9190620009ff565b92505081905550620002cd565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000286578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200027d9392919062000a4b565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000318578060026000828254039250508190555062000365565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003c4919062000a88565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043a82620003ef565b810181811067ffffffffffffffff821117156200045c576200045b62000400565b5b80604052505050565b600062000471620003d1565b90506200047f82826200042f565b919050565b600067ffffffffffffffff821115620004a257620004a162000400565b5b620004ad82620003ef565b9050602081019050919050565b60005b83811015620004da578082015181840152602081019050620004bd565b60008484015250505050565b6000620004fd620004f78462000484565b62000465565b9050828152602081018484840111156200051c576200051b620003ea565b5b62000529848285620004ba565b509392505050565b600082601f830112620005495762000548620003e5565b5b81516200055b848260208601620004e6565b91505092915050565b600060ff82169050919050565b6200057c8162000564565b81146200058857600080fd5b50565b6000815190506200059c8162000571565b92915050565b600080600060608486031215620005be57620005bd620003db565b5b600084015167ffffffffffffffff811115620005df57620005de620003e0565b5b620005ed8682870162000531565b935050602084015167ffffffffffffffff811115620006115762000610620003e0565b5b6200061f8682870162000531565b925050604062000632868287016200058b565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068f57607f821691505b602082108103620006a557620006a462000647565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200070f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006d0565b6200071b8683620006d0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000768620007626200075c8462000733565b6200073d565b62000733565b9050919050565b6000819050919050565b620007848362000747565b6200079c62000793826200076f565b848454620006dd565b825550505050565b600090565b620007b3620007a4565b620007c081848462000779565b505050565b5b81811015620007e857620007dc600082620007a9565b600181019050620007c6565b5050565b601f82111562000837576200080181620006ab565b6200080c84620006c0565b810160208510156200081c578190505b620008346200082b85620006c0565b830182620007c5565b50505b505050565b600082821c905092915050565b60006200085c600019846008026200083c565b1980831691505092915050565b600062000877838362000849565b9150826002028217905092915050565b62000892826200063c565b67ffffffffffffffff811115620008ae57620008ad62000400565b5b620008ba825462000676565b620008c7828285620007ec565b600060209050601f831160018114620008ff5760008415620008ea578287015190505b620008f6858262000869565b86555062000966565b601f1984166200090f86620006ab565b60005b82811015620009395784890151825560018201915060208501945060208101905062000912565b8683101562000959578489015162000955601f89168262000849565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200099b826200096e565b9050919050565b620009ad816200098e565b82525050565b6000602082019050620009ca6000830184620009a2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000a0c8262000733565b915062000a198362000733565b925082820190508082111562000a345762000a33620009d0565b5b92915050565b62000a458162000733565b82525050565b600060608201905062000a626000830186620009a2565b62000a71602083018562000a3a565b62000a80604083018462000a3a565b949350505050565b600060208201905062000a9f600083018462000a3a565b92915050565b610f6e8062000ab56000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610bc2565b60405180910390f35b6100db60048036038101906100d69190610c7d565b6102b9565b6040516100e89190610cd8565b60405180910390f35b6100f96102dc565b6040516101069190610d02565b60405180910390f35b61012960048036038101906101249190610d1d565b6102e6565b6040516101369190610cd8565b60405180910390f35b610147610315565b6040516101549190610d8c565b60405180910390f35b61017760048036038101906101729190610c7d565b610354565b005b610193600480360381019061018e9190610da7565b61038a565b6040516101a09190610d02565b60405180910390f35b6101b16103d2565b6040516101be9190610bc2565b60405180910390f35b6101e160048036038101906101dc9190610c7d565b610464565b6040516101ee9190610cd8565b60405180910390f35b610211600480360381019061020c9190610dd4565b610487565b60405161021e9190610d02565b60405180910390f35b60606003805461023690610e43565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610e43565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000806102c461050e565b90506102d1818585610516565b600191505092915050565b6000600254905090565b6000806102f161050e565b90506102fe858285610528565b6103098585856105bd565b60019150509392505050565b600061032b67e833461b7c352b7060c01b6106b1565b61033f6752a34010287ca0e860c01b6106b1565b600560009054906101000a900460ff16905090565b61036867736e8b7b4061b38a60c01b6106b1565b61037c6763b42f49e81c818e60c01b6106b1565b61038682826106b4565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103e190610e43565b80601f016020809104026020016040519081016040528092919081815260200182805461040d90610e43565b801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b5050505050905090565b60008061046f61050e565b905061047c8185856105bd565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6105238383836001610736565b505050565b60006105348484610487565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156105b757818110156105a7578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161059e93929190610e83565b60405180910390fd5b6105b684848484036000610736565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361062f5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106269190610eba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106989190610eba565b60405180910390fd5b6106ac83838361090d565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107265760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161071d9190610eba565b60405180910390fd5b6107326000838361090d565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107a85760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161079f9190610eba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081a5760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016108119190610eba565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610907578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108fe9190610d02565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361095f5780600260008282546109539190610f04565b92505081905550610a32565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109eb578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016109e293929190610e83565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a7b5780600260008282540392505081905550610ac8565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b259190610d02565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b6c578082015181840152602081019050610b51565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b9482610b32565b610b9e8185610b3d565b9350610bae818560208601610b4e565b610bb781610b78565b840191505092915050565b60006020820190508181036000830152610bdc8184610b89565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c1482610be9565b9050919050565b610c2481610c09565b8114610c2f57600080fd5b50565b600081359050610c4181610c1b565b92915050565b6000819050919050565b610c5a81610c47565b8114610c6557600080fd5b50565b600081359050610c7781610c51565b92915050565b60008060408385031215610c9457610c93610be4565b5b6000610ca285828601610c32565b9250506020610cb385828601610c68565b9150509250929050565b60008115159050919050565b610cd281610cbd565b82525050565b6000602082019050610ced6000830184610cc9565b92915050565b610cfc81610c47565b82525050565b6000602082019050610d176000830184610cf3565b92915050565b600080600060608486031215610d3657610d35610be4565b5b6000610d4486828701610c32565b9350506020610d5586828701610c32565b9250506040610d6686828701610c68565b9150509250925092565b600060ff82169050919050565b610d8681610d70565b82525050565b6000602082019050610da16000830184610d7d565b92915050565b600060208284031215610dbd57610dbc610be4565b5b6000610dcb84828501610c32565b91505092915050565b60008060408385031215610deb57610dea610be4565b5b6000610df985828601610c32565b9250506020610e0a85828601610c32565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e5b57607f821691505b602082108103610e6e57610e6d610e14565b5b50919050565b610e7d81610c09565b82525050565b6000606082019050610e986000830186610e74565b610ea56020830185610cf3565b610eb26040830184610cf3565b949350505050565b6000602082019050610ecf6000830184610e74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0f82610c47565b9150610f1a83610c47565b9250828201905080821115610f3257610f31610ed5565b5b9291505056fea2646970667358221220dcd6948ee48ee49e54eec09c9ee83d498f85a53b3be8b4b34168202240437a0b64736f6c63430008180033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    n: string,
    s: string,
    d: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(n, s, d, overrides || {});
  }
  override deploy(
    n: string,
    s: string,
    d: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(n, s, d, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
