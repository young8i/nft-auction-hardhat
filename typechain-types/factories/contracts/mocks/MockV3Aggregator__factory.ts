/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockV3Aggregator,
  MockV3AggregatorInterface,
} from "../../../contracts/mocks/MockV3Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600180553480156200001557600080fd5b5060405162000aa438038062000aa483398181016040528101906200003b9190620001b3565b620000576749475f2e03af75c260c01b6200013260201b60201c565b62000073677d3f20db2e965bae60c01b6200013260201b60201c565b8160ff1660808160ff16815250506200009d67156c5751e3b6acc360c01b6200013260201b60201c565b6040518060400160405280600481526020017f4d6f636b0000000000000000000000000000000000000000000000000000000081525060009081620000e3919062000474565b506200010067f7e259c0f1128b6160c01b6200013260201b60201c565b806002819055506200012367c62195aa3361cc7060c01b6200013260201b60201c565b4260038190555050506200055b565b50565b600080fd5b600060ff82169050919050565b62000152816200013a565b81146200015e57600080fd5b50565b600081519050620001728162000147565b92915050565b6000819050919050565b6200018d8162000178565b81146200019957600080fd5b50565b600081519050620001ad8162000182565b92915050565b60008060408385031215620001cd57620001cc62000135565b5b6000620001dd8582860162000161565b9250506020620001f0858286016200019c565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200027c57607f821691505b60208210810362000292576200029162000234565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002bd565b620003088683620002bd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003556200034f620003498462000320565b6200032a565b62000320565b9050919050565b6000819050919050565b620003718362000334565b6200038962000380826200035c565b848454620002ca565b825550505050565b600090565b620003a062000391565b620003ad81848462000366565b505050565b5b81811015620003d557620003c960008262000396565b600181019050620003b3565b5050565b601f8211156200042457620003ee8162000298565b620003f984620002ad565b8101602085101562000409578190505b620004216200041885620002ad565b830182620003b2565b50505b505050565b600082821c905092915050565b6000620004496000198460080262000429565b1980831691505092915050565b600062000464838362000436565b9150826002028217905092915050565b6200047f82620001fa565b67ffffffffffffffff8111156200049b576200049a62000205565b5b620004a7825462000263565b620004b4828285620003d9565b600060209050601f831160018114620004ec5760008415620004d7578287015190505b620004e3858262000456565b86555062000553565b601f198416620004fc8662000298565b60005b828110156200052657848901518255600182019150602085019450602081019050620004ff565b8683101562000546578489015162000542601f89168262000436565b8355505b6001600288020188555050505b505050505050565b60805161052d62000577600039600061010e015261052d6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d501461007a5780637284e416146100985780639a6fc8f5146100b6578063feaf968c146100ea575b600080fd5b61006461010c565b60405161007191906102a7565b60405180910390f35b610082610130565b60405161008f91906102db565b60405180910390f35b6100a0610136565b6040516100ad9190610386565b60405180910390f35b6100d060048036038101906100cb91906103ef565b6101c4565b6040516100e1959493929190610444565b60405180910390f35b6100f2610227565b604051610103959493929190610444565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60008054610143906104c6565b80601f016020809104026020016040519081016040528092919081815260200182805461016f906104c6565b80156101bc5780601f10610191576101008083540402835291602001916101bc565b820191906000526020600020905b81548152906001019060200180831161019f57829003601f168201915b505050505081565b60008060008060006101e067060a22bb862f603860c01b610288565b6101f4679cef0dd3f4021e8560c01b610288565b610208674e9671e7ac139c9260c01b610288565b6000600254600060035460009450945094509450945091939590929450565b600080600080600061024367111ebe9bb3f9faf560c01b610288565b610257670951a3167de9bbae60c01b610288565b61026b672cd1277b184fcd8d60c01b610288565b600060025460006003546000945094509450945094509091929394565b50565b600060ff82169050919050565b6102a18161028b565b82525050565b60006020820190506102bc6000830184610298565b92915050565b6000819050919050565b6102d5816102c2565b82525050565b60006020820190506102f060008301846102cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610330578082015181840152602081019050610315565b60008484015250505050565b6000601f19601f8301169050919050565b6000610358826102f6565b6103628185610301565b9350610372818560208601610312565b61037b8161033c565b840191505092915050565b600060208201905081810360008301526103a0818461034d565b905092915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6103cc816103ad565b81146103d757600080fd5b50565b6000813590506103e9816103c3565b92915050565b600060208284031215610405576104046103a8565b5b6000610413848285016103da565b91505092915050565b610425816103ad565b82525050565b6000819050919050565b61043e8161042b565b82525050565b600060a082019050610459600083018861041c565b6104666020830187610435565b61047360408301866102cc565b61048060608301856102cc565b61048d608083018461041c565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806104de57607f821691505b6020821081036104f1576104f0610497565b5b5091905056fea26469706673582212201c5b54f5f4f75376ba31d43db8a3d0b11fb9dbbe20f3697dd7e40032c890497f64736f6c63430008180033";

type MockV3AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockV3AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockV3Aggregator__factory extends ContractFactory {
  constructor(...args: MockV3AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      decimals_,
      initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(decimals_, initialAnswer, overrides || {}) as Promise<
      MockV3Aggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockV3Aggregator__factory {
    return super.connect(runner) as MockV3Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockV3AggregatorInterface {
    return new Interface(_abi) as MockV3AggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockV3Aggregator {
    return new Contract(address, _abi, runner) as unknown as MockV3Aggregator;
  }
}
