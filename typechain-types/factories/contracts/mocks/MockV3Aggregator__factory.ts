/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockV3Aggregator,
  MockV3AggregatorInterface,
} from "../../../contracts/mocks/MockV3Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526001805534801561001457600080fd5b506040516104cc3803806104cc83398101604081905261003391610070565b60ff82166080526040805180820190915260048152634d6f636b60e01b60208201526000906100629082610145565b506002555042600355610204565b6000806040838503121561008357600080fd5b825160ff8116811461009457600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100ce57607f821691505b6020821081036100ee57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610140576000816000526020600020601f850160051c8101602086101561011d5750805b601f850160051c820191505b8181101561013c57828155600101610129565b5050505b505050565b81516001600160401b0381111561015e5761015e6100a4565b6101728161016c84546100ba565b846100f4565b602080601f8311600181146101a7576000841561018f5750858301515b600019600386901b1c1916600185901b17855561013c565b600085815260208120601f198616915b828110156101d6578886015182559484019460019091019084016101b7565b50858210156101f45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516102ae61021e6000396000606101526102ae6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d501461009a5780637284e416146100b15780639a6fc8f5146100c6578063feaf968c1461011c575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6100a360015481565b604051908152602001610091565b6100b961012e565b60405161009191906101bc565b6100e56100d436600461020b565b506002546003546000928391908290565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610091565b600254600354600091908290816100e5565b6000805461013b9061023e565b80601f01602080910402602001604051908101604052809291908181526020018280546101679061023e565b80156101b45780601f10610189576101008083540402835291602001916101b4565b820191906000526020600020905b81548152906001019060200180831161019757829003601f168201915b505050505081565b60006020808352835180602085015260005b818110156101ea578581018301518582016040015282016101ce565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561021d57600080fd5b813569ffffffffffffffffffff8116811461023757600080fd5b9392505050565b600181811c9082168061025257607f821691505b60208210810361027257634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002ad3cdcecd071d67a6bae8ff4121556391a19411b1a1093c189f36bde2c509564736f6c63430008180033";

type MockV3AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockV3AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockV3Aggregator__factory extends ContractFactory {
  constructor(...args: MockV3AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      decimals_,
      initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(decimals_, initialAnswer, overrides || {}) as Promise<
      MockV3Aggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockV3Aggregator__factory {
    return super.connect(runner) as MockV3Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockV3AggregatorInterface {
    return new Interface(_abi) as MockV3AggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockV3Aggregator {
    return new Contract(address, _abi, runner) as unknown as MockV3Aggregator;
  }
}
