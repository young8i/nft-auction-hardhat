/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface NftAuctionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "allAuctions"
      | "allAuctionsLength"
      | "auctionImplementation"
      | "auctionOf"
      | "bps"
      | "createAuction"
      | "feeBpsFor"
      | "feeTo"
      | "initialize"
      | "oracle"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setFeeTiers"
      | "setFeeTo"
      | "setImplementation"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "usdThresholds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionCreated"
      | "FeeTiersSet"
      | "FeeToSet"
      | "ImplementationUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allAuctionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "bps", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBpsFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTiers",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdThresholds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAuctionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctionOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBpsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdThresholds",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auction: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    auction: string,
    nft: string,
    tokenId: bigint,
    seller: string
  ];
  export interface OutputObject {
    auction: string;
    nft: string;
    tokenId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTiersSetEvent {
  export type InputTuple = [usdThresholds: BigNumberish[], bps: BigNumberish[]];
  export type OutputTuple = [usdThresholds: bigint[], bps: bigint[]];
  export interface OutputObject {
    usdThresholds: bigint[];
    bps: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeToSetEvent {
  export type InputTuple = [feeTo: AddressLike];
  export type OutputTuple = [feeTo: string];
  export interface OutputObject {
    feeTo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImplementationUpdatedEvent {
  export type InputTuple = [oldImpl: AddressLike, newImpl: AddressLike];
  export type OutputTuple = [oldImpl: string, newImpl: string];
  export interface OutputObject {
    oldImpl: string;
    newImpl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NftAuctionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NftAuctionFactory;
  waitForDeployment(): Promise<this>;

  interface: NftAuctionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  allAuctions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allAuctionsLength: TypedContractMethod<[], [bigint], "view">;

  auctionImplementation: TypedContractMethod<[], [string], "view">;

  auctionOf: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  bps: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createAuction: TypedContractMethod<
    [
      nft: AddressLike,
      tokenId: BigNumberish,
      duration: BigNumberish,
      startPriceUsd: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  feeBpsFor: TypedContractMethod<[bidUsd: BigNumberish], [bigint], "view">;

  feeTo: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      owner_: AddressLike,
      implementation_: AddressLike,
      oracle_: AddressLike,
      feeTo_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeTiers: TypedContractMethod<
    [thresholds: BigNumberish[], bps_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setFeeTo: TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;

  setImplementation: TypedContractMethod<
    [newImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdThresholds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allAuctions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allAuctionsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auctionOf"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "bps"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      nft: AddressLike,
      tokenId: BigNumberish,
      duration: BigNumberish,
      startPriceUsd: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeBpsFor"
  ): TypedContractMethod<[bidUsd: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      implementation_: AddressLike,
      oracle_: AddressLike,
      feeTo_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeTiers"
  ): TypedContractMethod<
    [thresholds: BigNumberish[], bps_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeTo"
  ): TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setImplementation"
  ): TypedContractMethod<[newImpl: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdThresholds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeTiersSet"
  ): TypedContractEvent<
    FeeTiersSetEvent.InputTuple,
    FeeTiersSetEvent.OutputTuple,
    FeeTiersSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeToSet"
  ): TypedContractEvent<
    FeeToSetEvent.InputTuple,
    FeeToSetEvent.OutputTuple,
    FeeToSetEvent.OutputObject
  >;
  getEvent(
    key: "ImplementationUpdated"
  ): TypedContractEvent<
    ImplementationUpdatedEvent.InputTuple,
    ImplementationUpdatedEvent.OutputTuple,
    ImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(address,address,uint256,address)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "FeeTiersSet(uint256[],uint16[])": TypedContractEvent<
      FeeTiersSetEvent.InputTuple,
      FeeTiersSetEvent.OutputTuple,
      FeeTiersSetEvent.OutputObject
    >;
    FeeTiersSet: TypedContractEvent<
      FeeTiersSetEvent.InputTuple,
      FeeTiersSetEvent.OutputTuple,
      FeeTiersSetEvent.OutputObject
    >;

    "FeeToSet(address)": TypedContractEvent<
      FeeToSetEvent.InputTuple,
      FeeToSetEvent.OutputTuple,
      FeeToSetEvent.OutputObject
    >;
    FeeToSet: TypedContractEvent<
      FeeToSetEvent.InputTuple,
      FeeToSetEvent.OutputTuple,
      FeeToSetEvent.OutputObject
    >;

    "ImplementationUpdated(address,address)": TypedContractEvent<
      ImplementationUpdatedEvent.InputTuple,
      ImplementationUpdatedEvent.OutputTuple,
      ImplementationUpdatedEvent.OutputObject
    >;
    ImplementationUpdated: TypedContractEvent<
      ImplementationUpdatedEvent.InputTuple,
      ImplementationUpdatedEvent.OutputTuple,
      ImplementationUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
